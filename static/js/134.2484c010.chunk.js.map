{"version":3,"file":"static/js/134.2484c010.chunk.js","mappings":"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","sources":["pages/Movies.jsx","service/movies-servise.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'service/movies-servise';\nimport styled from 'styled-components';\n\nconst ListOfFilm = styled.ul`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  li {\n    font-size: 18px;\n    font-weight: 600;\n  }\n`;\n\nconst InputWrapper = styled.form`\n  box-shadow: 0px 10px 10px rgba(46, 47, 66, 0.08),\n    0px 1px 1px rgba(46, 47, 66, 0.16), 0px 2px 1px rgba(46, 47, 66, 0.08);\n  padding: 10px;\n  border-radius: 5px;\n  background-color: #edf3fb;\n  input {\n    outline: none;\n  }\n  label {\n    color: grey;\n  }\n`;\n\nconst Container = styled.section`\n  padding: 20px;\n  background-color: #fff;\n`;\n\nconst ErrorText = styled.p`\n  margin-top: 20px;\n  color: red;\n`;\n\nconst Movies = () => {\n  const [searchFilm, setSearchFilm] = useSearchParams();\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('');\n  const location = useLocation();\n  const filmName = searchFilm.get('filmName') ?? '';\n\n  useEffect(() => {\n    const fetchFilm = async () => {\n      try {\n        const date = await getMoviesByQuery(filmName);\n        const films = date.results;\n\n        if (!films.length && filmName !== '') {\n          setError(`Фільми зі словом ${filmName} не знайдені`);\n          setFilms([]);\n          setStatus('rejected');\n        } else {\n          setFilms(films);\n          setError(null);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n\n    fetchFilm();\n  });\n\n  const updateSearch = event => {\n    const filmNameValue = event.target.value;\n    if (filmNameValue === '') {\n      return setSearchFilm({});\n    }\n    setSearchFilm({ filmName: filmNameValue });\n  };\n\n  return (\n    <Container>\n      <InputWrapper>\n        <input type=\"text\" value={filmName} onChange={updateSearch} />\n        <label> Пошук фільму за ключовим словом</label>\n      </InputWrapper>\n\n      {status === 'rejected' && <ErrorText>{error}</ErrorText>}\n\n      <ListOfFilm>\n        {films.map(film => (\n          <li key={film.id}>\n            <Link to={`${film.id}`} state={{ from: location }}>\n              {film.title}\n            </Link>\n          </li>\n        ))}\n      </ListOfFilm>\n    </Container>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\n\n// const API_KEY = '4744525d1800c89cfdfbbbd549aa8ef3';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5MWU5ZTQzYmM1YWJkNjJiY2U0YTQxMjI1MGNhMmI0YSIsInN1YiI6IjY0OGRmMWZjYzNjODkxMDBlYjMyOGIyNSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.na6QWvyUcstLt3R2SMZMeFGFAjRDN7q7NqBOmfFB0qU',\n  },\n};\nexport const getTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getMoviesByQuery = async filmName => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?query=${filmName}&include_adult=false&language=en-US&page=1`,\n    options\n  );\n\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?language=en-US`,\n    options\n  );\n\n  return response.data;\n};\n\nexport const getCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?language=en-US`,\n    options\n  );\n\n  return response.data;\n};\n"],"names":["ListOfFilm","styled","_templateObject","_taggedTemplateLiteral","InputWrapper","_templateObject2","Container","_templateObject3","ErrorText","_templateObject4","_searchFilm$get","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchFilm","setSearchFilm","_useState","useState","_useState2","films","setFilms","_useState3","_useState4","error","setError","_useState5","_useState6","status","setStatus","location","useLocation","filmName","get","useEffect","fetchFilm","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","date","_films","_context","prev","next","getMoviesByQuery","sent","results","length","concat","t0","message","stop","apply","arguments","_jsxs","children","_jsx","type","value","onChange","event","filmNameValue","target","map","film","Link","to","id","state","from","title","BASE_URL","options","method","headers","accept","Authorization","getTrending","response","axios","abrupt","data","_ref2","_callee2","_context2","_x","getMovieDetails","_ref3","_callee3","movieId","_context3","_x2","getReviews","_ref4","_callee4","_context4","_x3","getCast","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}